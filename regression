# Importing the necessary libraries
import pandas as pd         # For data manipulation and analysis
import numpy as np          # For numerical computations
import matplotlib.pyplot as plt  # For data visualization
from sklearn.model_selection import train_test_split  # For splitting the dataset
from sklearn.linear_model import LinearRegression    # For creating a regression model
from sklearn.metrics import mean_squared_error, r2_score  # For evaluating the model

# Step 1: Create a simple dataset
# Simulating house size (in square feet) and house price (in $1000s)
data = {
    'Size (sqft)': [750, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200],
    'Price ($1000s)': [150, 160, 165, 170, 175, 180, 185, 190, 200, 210]
}

# Convert the dataset into a Pandas DataFrame
df = pd.DataFrame(data)

# Step 2: Visualize the dataset
plt.scatter(df['Size (sqft)'], df['Price ($1000s)'], color='blue')
plt.title('House Size vs. Price')
plt.xlabel('Size (sqft)')
plt.ylabel('Price ($1000s)')
plt.grid(True)
plt.show()

# Step 3: Split the data into features (X) and target (y)
X = df[['Size (sqft)']]  # Features
y = df['Price ($1000s)'] # Target variable

# Step 4: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Create and train the regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 6: Make predictions on the test set
y_pred = model.predict(X_test)

# Step 7: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Model Evaluation Metrics:")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R-squared (RÂ² Score): {r2:.2f}")

# Step 8: Visualize the regression line
plt.scatter(X, y, color='blue', label='Actual Data')
plt.plot(X, model.predict(X), color='red', label='Regression Line')
plt.title('Linear Regression Model')
plt.xlabel('Size (sqft)')
plt.ylabel('Price ($1000s)')
plt.legend()
plt.grid(True)
plt.show()
